apiVersion: flowctl/v1
kind: Pipeline
metadata:
  name: sandbox-pipeline
  namespace: sandbox
  labels:
    environment: sandbox
    purpose: development
  annotations:
    description: "Example pipeline for use with flowctl sandbox"

spec:
  description: "Pipeline designed to work with sandbox infrastructure services"
  driver: docker
  
  sources:
    - id: redis-reader
      type: source
      image: alpine:latest
      command: ["sh", "-c"]
      args: |
        # Simple Redis reader simulation
        # In real implementation, would connect to sandbox Redis
        while true; do
          echo "{
            \"source\": \"redis\",
            \"key\": \"event:$(date +%s)\",
            \"value\": \"test_data_$RANDOM\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
          }"
          sleep 2
        done
      env:
        REDIS_HOST: "redis"
        REDIS_PORT: "6379"
        STREAM_KEY: "events:stream"
  
  processors:
    - id: event-processor
      type: processor
      image: alpine:latest
      command: ["sh", "-c"]
      args: |
        while read event; do
          # Process events and add metrics
          echo "$event" | sed 's/}/, "processed": true, "latency_ms": '$((RANDOM % 100))', "processor_id": "'$HOSTNAME'"}/'
        done
      inputs: ["redis-reader"]
      env:
        PROCESSING_MODE: "streaming"
        METRICS_ENABLED: "true"
  
  sinks:
    - id: kafka-writer
      type: sink
      image: alpine:latest
      command: ["sh", "-c"]
      args: |
        # Simulate writing to Kafka in sandbox
        while read event; do
          echo "[KAFKA] Publishing to topic 'processed-events': $event"
          # Real implementation would use Kafka client
        done
      inputs: ["event-processor"]
      env:
        KAFKA_BROKERS: "kafka:9092"
        TOPIC: "processed-events"
        COMPRESSION: "snappy"

    - id: metrics-sink
      type: sink
      image: alpine:latest
      command: ["sh", "-c"]
      args: |
        # Extract and send metrics to monitoring
        while read event; do
          latency=$(echo "$event" | grep -o '"latency_ms": [0-9]*' | cut -d' ' -f2)
          echo "[METRICS] Event processed with latency: ${latency}ms"
          # Real implementation would send to Prometheus
        done
      inputs: ["event-processor"]
      env:
        PROMETHEUS_PUSHGATEWAY: "http://pushgateway:9091"
        JOB_NAME: "sandbox_pipeline"